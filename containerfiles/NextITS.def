# NextITS - Singularity definition file, main container

## To avoid GitHub API limits, use `SINGULARITYENV_GITHUB_PAT=[token]` with Singularity
## to specify the GITHUB_PAT token (the token will be available only during the `%post` section of the build)


## Build stage (Rust and Cargo), for runiq
Bootstrap: docker
From: rust:1.89.0-slim
Stage: build

%post
  # rustup --version   # 1.28.2
  # rustc  --version   # 1.89.0
  # cargo  --version   # 1.89.0
  cargo install runiq sd
  # runiq --version    # 2.0.0
  # sd    --version    # 1.0.0

## Main stage
Bootstrap: docker
From: rocker/r-ver:4.5.1
Stage: final

%labels
  Maintainer vladimir.mikryukov@ut.ee
  R_Version 4.5.1
  NextITS_container_version 1.1.0

%runscript
  exec "$@"

%apprun R
  exec R "${@}"

%apprun Rscript
  exec Rscript "${@}"

%environment
  export PATH="/opt/software/conda/bin:$PATH"
  export CONDA_PREFIX="/opt/software/conda"
  
  # Source conda initialization if available (for interactive sessions)
  if [ -f "/opt/software/conda/init.bash" ]; then
    source "/opt/software/conda/init.bash"
  fi

## Install the required dependencies
%post
  export R_VERSION=4.5.1

  apt-get update -qq \
  && apt-get -y --no-install-recommends install \
    tar zip unzip pigz gzip zstd xz-utils bzip2 coreutils \
    curl wget git less gawk nano rename bc \
    ca-certificates locales  \
    libtre-dev libtre5 zlib1g zlib1g-dev liblzma-dev libbz2-dev libcurl4-openssl-dev libglpk-dev libglpk40 \
    build-essential

  ## Configure default locale
  # echo "C.UTF-8" >> /etc/locale.gen
  # locale-gen C.UTF-8
  /usr/sbin/update-locale LANG=C.UTF-8
  export LC_ALL=C.UTF-8
  export LANG=C.UTF-8

  ## Install additional R packages
  install2.r --error --skipinstalled --ncpus -1 \
    remotes \
    optparse \
    R.utils \
    data.table \
    arrow \
    duckdb \
    BiocManager \
    plyr \
    dplyr \
    ggplot2 \
    doFuture \
    openxlsx \
    yaml

  R      -e 'BiocManager::install("Biostrings", ask = FALSE)' \
    && R -e 'BiocManager::install("ShortRead",  ask = FALSE)' \
    && R -e 'BiocManager::install("DECIPHER",   ask = FALSE)' \
    && R -e 'BiocManager::install("dada2",      ask = FALSE)' \
    && R -e 'BiocManager::install("phyloseq",   ask = FALSE)' \
    && rm -rf /tmp/downloaded_packages

  install2.r --error --skipinstalled geodist phytools \
    && R -e 'ok <- tryCatch({ remotes::install_github("vmikk/metagMisc"); TRUE }, error=function(e){ message(e); FALSE }); \
          if (!ok || !requireNamespace("metagMisc", quietly=TRUE)) quit(status=1)' \
    && R -e 'ok <- tryCatch({ remotes::install_cran("qs", type = "source", configure.args = "--with-simd=AVX2"); TRUE }, error=function(e){ message(e); FALSE }); \
          if (!ok || !requireNamespace("qs", quietly=TRUE)) quit(status=1)' \
    && rm -rf /tmp/downloaded_packages

  ## Install conda
  readonly conda_prefix="/opt/software/conda"

  mkdir -p /opt/software
  cd /opt/software
  curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"
  bash Miniforge3-Linux-x86_64.sh -u -b -p ${conda_prefix}
  rm Miniforge3-Linux-x86_64.sh
  ${conda_prefix}/bin/conda config --add channels bioconda
  ${conda_prefix}/bin/mamba update -y --all

  ## Conda initialization script by Antoine Prouvost
  # https://github.com/ds4dm/singularity-conda/blob/main/conda.def
  # Singularity does all the environment sourcing as shell (only latter calls bash), which conda does not support.
  # We put the content in a file, manually call bash, and source it.
  {
      echo 'eval "$(' "'${conda_prefix}/bin/conda' 'shell.bash' 'hook' 2> /dev/null" ')"'
      echo 'if [ $? -eq 0 ]; then'
      echo '  eval "$__conda_setup"'
      echo 'else'
      echo '  if [ -f ' "'${conda_prefix}/etc/profile.d/conda.sh'" ']; then'
      echo '    .' "'${conda_prefix}/opt/mamba/etc/profile.d/conda.sh'"
      echo '  else'
      echo '    export PATH="/opt/software/conda/bin:$PATH"'
      echo '  fi'
      echo 'fi'
      echo 'unset __conda_setup'
  } >> ${conda_prefix}/init.bash

  ## Create conda environment and install software
  ${conda_prefix}/bin/mamba install --quiet --yes \
    "lima>=2.13.0" \
    "pbtk>=3.5.0" \
    "vsearch>=2.30.0" \
    "swarm>=3.1.5" \
    "seqkit>=2.10.1" \
    "seqfu>=1.22.3" \
    "fastp>=1.0.1" \
    "blast>=2.17.0" \
    "bioawk" \
    "miller>=6.13.0" \
    "xsv>=0.13.0" \
    "bedtools>=2.31.1" \
    "parallel>=20250622" \
    "csvtk>=0.34.0" \
    "itsx>=1.1.3" \
    "cutadapt>=5.1" \
    "bbmap>=39.33" \
    "ripgrep>=14.1.1" \
    "fd-find>=10.2.0" \
    "mmseqs2"

  ## seqhasher
  # https://github.com/vmikk/seqhasher
  wget https://github.com/vmikk/seqhasher/releases/download/1.1.2/seqhasher
  chmod +x seqhasher
  mv seqhasher ${conda_prefix}/bin/

  ## phredsort
  # https://github.com/vmikk/phredsort
  wget https://github.com/vmikk/phredsort/releases/download/1.3.0/phredsort
  chmod +x phredsort
  mv phredsort ${conda_prefix}/bin/

  ## ucs
  # https://github.com/vmikk/ucs
  wget https://github.com/vmikk/ucs/releases/download/0.8.0/ucs
  chmod +x ucs
  mv ucs ${conda_prefix}/bin/

  ## fqgrep v.0.4.4
  # https://github.com/indraniel/fqgrep
  git clone --depth 1 https://github.com/indraniel/fqgrep
  cd fqgrep
  make
  mv fqgrep ${conda_prefix}/bin/
  cd ..
  rm -r fqgrep

  ## rush
  # https://github.com/shenwei356/rush
  wget https://github.com/shenwei356/rush/releases/download/v0.7.0/rush_linux_amd64.tar.gz
  tar -xzf rush_linux_amd64.tar.gz
  mv rush ${conda_prefix}/bin/
  rm rush_linux_amd64.tar.gz

  ## brename
  # https://github.com/shenwei356/brename
  wget https://github.com/shenwei356/brename/releases/download/v2.14.0/brename_linux_amd64.tar.gz
  tar -xzf brename_linux_amd64.tar.gz
  mv brename ${conda_prefix}/bin/
  rm brename_linux_amd64.tar.gz

  ## MUMU
  # https://github.com/frederic-mahe/mumu
  git clone --depth 1 https://github.com/frederic-mahe/mumu.git \
    && cd ./mumu/ \
    && make && make check && make install
  mv mumu ${conda_prefix}/bin/
  cd ..
  rm -r mumu

  ## Get the updated ITSx databases ["Version 2", 5 April 2024, curated by Henrik Nilsson]
  git clone --depth 1 https://github.com/USDA-ARS-GBRU/ITS_HMMs/
  ## Compress and index HMM flatfiles
  find ITS_HMMs/ITSx_db/HMMs/ -name "*.hmm" | grep -v "N.hmm" \
    | ${conda_prefix}/bin/parallel -j1 "${conda_prefix}/bin/hmmpress {}"
  ## Replace old profiles
  rm ${conda_prefix}/bin/ITSx_db/HMMs/*
  mv ITS_HMMs/ITSx_db/HMMs/* ${conda_prefix}/bin/ITSx_db/HMMs/
  rm -r ITS_HMMs
  ## Activate Parabasalia model in ITSx
  # grep "\#push(@profileSet,\"Y\")" ${conda_prefix}/bin/ITSx
  sed -i '/#push(@profileSet,"Y")/s/#//' ${conda_prefix}/bin/ITSx

  ## DuckDB
  # https://duckdb.org/docs/installation/?version=stable
  curl -L https://github.com/duckdb/duckdb/releases/download/v1.3.2/duckdb_cli-linux-amd64.zip -o duckdb_cli-linux-amd64.zip \
    && unzip duckdb_cli-linux-amd64.zip -d ${conda_prefix}/bin/ \
    && rm duckdb_cli-linux-amd64.zip

  ## Clean up
  apt-get autoremove -y \
    && apt-get autoclean -y \
    && rm -rf /var/lib/apt/lists/* \
    && ${conda_prefix}/bin/mamba clean --all --quiet --yes

  ## Activate environment
  # source ${conda_prefix}/bin/activate ${conda_prefix}

  ## Ensure software is accessible to any user (NB! avoid slow recursive operations)
  chmod 755 /opt/software
  chmod a+rX /opt/software/conda/bin
  chmod a+rX /opt/software/conda/lib
  
  ## Use bash to properly activate the conda environment
  echo 'source' "'${conda_prefix}/init.bash'" | bash

  cd /opt/software


## Add binary from the stage one - runiq, sd
%files from build
  /usr/local/cargo/bin/runiq /opt/software/conda/bin/
  /usr/local/cargo/bin/sd    /opt/software/conda/bin/


%test
  R --quiet -e "stopifnot(getRversion() == '${R_VERSION}')"
