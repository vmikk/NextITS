/*
==============================================================================
    NextITS: Pipeline to process fungal ITS amplicons
==============================================================================
    Default config options for all compute environments
------------------------------------------------------------------------------
*/


// Enable nf-schema for parameter validation
plugins {
    id 'nf-schema@2.4.1'
}

// Global default params, used in configs
includeConfig 'conf/params.config'

// Configure validation behavior
validation {
    parametersSchema       = "${projectDir}/nextflow_schema.json"
    monochromeLogs         = false
    failUnrecognisedParams = false
    lenientMode            = true
    
    // Help options  
    help {
        enabled = true
        command = "nextflow run vmikk/NextITS"
        shortParameter = "help"
        fullParameter  = "helpFull"
        showHiddenParameter = "showHidden"
        showHidden = false
        beforeText = "NextITS: Pipeline to process rRNA amplicons sequenced with PacBio"
        afterText = """
If you use NextITS for your analysis please cite:

* NextITS pipeline
  Mikryukov V, Anslan S, Tedersoo L.
  NextITS: a pipeline for metabarcoding fungi and other eukaryotes with full-length ITS sequenced with PacBio.
  https://github.com/vmikk/NextITS

* Software dependencies
  https://github.com/vmikk/NextITS/blob/main/CITATIONS.md
        """
    }
    
    // Summary options
    summary {
        beforeText = "NextITS pipeline parameters:"
        // afterText = ""
    }
}

// Conditional params
if (params.qc_twocolor == true) {
    includeConfig 'conf/params_illumina_2color.config'
} else {
    includeConfig 'conf/params_illumina_4color.config'
}

// Ignore process selector warnings,
// could be disabled using the `devel` profile
nextflow.enable.configProcessNamesValidation = false


// Process-specific parameters
process {

    ////////// Step-1 processes

    // Converting BAM to FASTQ
    withName: 'S1:bam2fastq'{
        cpus = 4
    }

    // QC - PacBio single-end reads
    // vsearch currently does not suppot multithreading for `--fastq_filter`
    // see https://github.com/torognes/vsearch/issues/466
    withName: 'S1:qc_se'{
        cpus = 1
    }

    // QC - Illumina paired-end reads
    withName: 'S1:qc_pe'{
        // max threads for fastp = 16
        cpus = 8
    }

    // Primer disambiguation
    withName: 'S1:disambiguate'{
        cpus = 1
    }

    // Validate tags for demultiplexing
    withName: 'S1:tag_validation'{
        cpus = 1
    }

    // Demultiplexing of PacBio reads (with LIMA)
    withName: 'S1:demux'{
        cpus = 8
    }

    // Demultiplexing merged Illumina reads
    withName: 'S1:demux_illumina'{
        cpus = 8
    }

    // Demultiplexing non-merged Illumina reads
    withName: 'S1:demux_illumina_notmerged'{
        cpus = 8
    }

    // Merging of Illumina PE reads
    withName: 'S1:merge_pe'{
        cpus = 8
    }
    
    // Modify barcodes for cutadapt (Illumina only)
    withName: 'S1:prep_barcodes'{
        cpus = 1
    }

   // Demultiplexing of Illumina reads (with cutadapt)
    withName: 'S1:demux_illumina'{
        cpus = 8
    }

    // Check primers
    withName: 'S1:primer_check'{
        cpus = 1
    }

    // ITSx
    withName: 'S1:itsx'{
        cpus = 3
    }

    // Collect all ITS parts extracted by ITSx
    withName: 'S1:itsx_collect'{
        cpus = 1
    }

    // Sequence quality tables
    withName: 'S1:seq_qual'{
        cpus   = 4
        memory = null
    }

    // Homopolymer compression
    withName: 'S1:homopolymer' {
        cpus = 1
    }

    // Reference-based chimera removal
    withName: 'S1:chimera_ref' {
        cpus = 1
    }

    // Chimera rescue
    withName: 'S1:chimera_rescue' {
        cpus = 1
    }

    // De novo chimera search
    withName: 'S1:chimera_denovo' {
        cpus = 1
    }

    // Aggregate de novo chimeras
    withName: 'S1:chimera_denovo_agg' {
        cpus = 1
    }

    // Global dereplication
    withName: 'S1:glob_derep' {
        cpus = 1
    }

    // Pool sequences (for ASV table)
    withName: 'S1:pool_seqs' {
        cpus = 3
    }

    // OTU clustering
    withName: 'S1:tj_preclust' {
        cpus = 8
    }

    // Tag-jump removal
    withName: 'S1:tj' {
        cpus = 1
    }

    // Create sequence table
    withName: 'S1:prep_seqtab' {
        cpus = 4
    }

    // Read count summary
    withName: 'S1:read_counts' {
        cpus = 4
    }

    // Read count summary
    // For a quick workflow for demultiplexing and estimation of the number of reads per sample
    withName: 'S1:quick_stats' {
        cpus = 4
    }



    ////////// Step-2 processes

    // Aggregate sequences, remove de novo chimeras
    withName: 'S2:aggregate_sequences' {
        cpus = 8
    }

    // Dereplication (currently, only single-threaded; only comression is multithreaded))
    withName: 'S2:dereplication' {
        cpus = 8
    }

    // 100% clustering with sequence length variation allowed (UNITE-style)
    withName: 'S2:dereplication_unite' {
        cpus = 8
    }

    // Pre-clustering
    withName: 'S2:linclust' {
        cpus = 8
    }

    // Bucketize sequences into clusters
    withName: 'S2:bucketize' {
        cpus = 6
    }

    // UNOISE
    withName: 'S2:CLUSTERING:unoise' {
        cpus = 8
    }

    // DADA2
    withName: 'S2:CLUSTERING:dada2' {
        cpus = 8
    }

    // VSEARCH clustering
    withName: 'S2:CLUSTERING:cluster_vsearch' {
        cpus = 8
    }

    // SWARM clustering
    withName: 'S2:CLUSTERING:cluster_swarm' {
        cpus = 8
    }

    // Summarize sequence abundance by OTU
    withName: 'S2:summarize' {
        cpus = 4
    }

    // Post-clustering curation with LULU
    withName: 'S2:lulu' {
        cpus = 8
    }

}  // end of process configs




profiles {

    // Test config (built-in data)
    test   { includeConfig 'conf/test_step1.config' }      // Step-1 (default test = test for Step-1)
    test1  { includeConfig 'conf/test_step1.config' }      // Step-1
    test2  { includeConfig 'conf/test_step2.config' }      // Step-2

    // Docker-based profile
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        apptainer.enabled      = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        docker.runOptions      = '-u $(id -u):$(id -g)'

        // Container specifications are here
        includeConfig 'conf/docker.config'
    }

    // Singularity-based profile
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        // singularity.ociAutoPull = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false

        // Container specifications are here
        includeConfig 'conf/singularity.config'
    }
    // Podman-based profile
    podman {
        podman.enabled       = true
        docker.enabled       = false
        conda.enabled        = false
        singularity.enabled  = false
        apptainer.enabled    = false
        podman.enabled       = false
        shifter.enabled      = false
        charliecloud.enabled = false

        // Container specifications are the same as for Docker
        includeConfig 'conf/docker.config'
    }



    // Larger resource amount (e.g., CPUs) for execution on HPC
    hpc {
        includeConfig 'conf/hpc.config'
    }

    // Profile for the UT HPC cluster (SLURM)
    hpc_utslurm {
        includeConfig 'conf/hpc_utslurm.config'
    }

    // Enable process selector warnings
    // see https://github.com/nextflow-io/nextflow/issues/2700#issuecomment-1383984109
    devel { 
        nextflow.enable.configProcessNamesValidation = true
    }

} // end of profiles



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


manifest {
    name            = 'NextITS'
    author          = 'Vladimir Mikryukov'   // The author field is deprecated, keep it here for compatibility with Nextflow versions < 24.10.0
    
    contributors    = [
        [
            name: 'Vladimir Mikryukov',
            affiliation: 'University of Tartu',
            email: 'vladimir.mikryukov@ut.ee',
            github: '@vmikk',
            contribution: ["author", "maintainer"],
            orcid: '0009-0006-0086-2470'
        ],
        [
            name: 'Sten Anslan',
            affiliation: 'University of Tartu',
            email: 'sten.anslan@ut.ee',
            github: '@anslan',
            contribution: ["contributor"],
            orcid: '0000-0002-2299-454X'
        ],
        [
            name: 'Leho Tedersoo',
            affiliation: 'University of Tartu',
            email: 'leho.tedersoo@ut.ee',
            contribution: ["contributor"],
            orcid: '0000-0002-1635-1249'
        ],
    ]

    homePage        = 'https://github.com/vmikk/NextITS'
    docsUrl         = 'https://Next-ITS.github.io/'
    description     = 'Pipeline to process long rRNA amplicons sequenced with PacBio'
    license         = 'Apache-2.0'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=25.04.0'
    version         = '1.1.0'
    doi             = '10.5281/zenodo.15074881'
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

